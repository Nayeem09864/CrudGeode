The Java Management Extensions (JMX) API is a standard —developed through the Java Community Process (JCP) as JSR 3—for
managing and monitoring applications and services. It defines a management architecture, design patterns, APIs, and
services for building web-based, distributed, dynamic, and modular solutions to manage Java-enabled resources.
The JMX APIs make it possible to add manageability to Java-enabled equipment, from web phones to set-top boxes to
network devices and servers. Using JMX technology to manage applications and services increases their value to vendors
and clients by making applications easier to install, configure, and maintain.

This article provides a fast track technical tutorial to JMX technology. It discusses JMX's tiered architecture, the
JMX programming model, and code demonstrating how to use JMX technology to develop management applications. In addition,
the article shows how to use a JMX technology-compliant management tool in the Java 2 Platform, Standard Edition 5.0
(J2SE 5.0), which has implemented version 1.2 of the JMX specification.


Overview of JMX Technology
    The JMX technology is native to the Java programming language. As a result, it offers natural, efficient, and
lightweight management extensions to Java-based functions. It consists of a set of specifications and development tools
for managing Java environments and developing state-of-the-art management solutions for applications and services.
It provides Java developers with the means to instrument Java code, create smart Java agents, implement distributed
management middleware and managers, and easily integrate these solutions into existing management and monitoring systems.
The dynamics of the JMX technology architecture enables you to use it to monitor and manage resources as they are
implemented and installed. It can also be used to monitor and manage the Java Virtual Machine (JVM machine).

Typical uses of the JMX technology include:
    Consulting and changing application configuration
Collecting statistics about application behavior and making the statistics available
Notification of state changes and erroneous conditions


Benefits of JMX Technology

The JMX technology enables Java developers to encapsulate resources as Java objects and expose them as management
resources in a distributed environment. The JMX specification lists the following benefits to using it to build a
management infrastructure:
    Manages Java applications and services without heavy investment: JMX architecture relies on a core managed object
    server that acts as a management agent and can run on most Java-enabled devices. Java applications can be managed
    with little impact on their design. Provides a scalable management architecture: A JMX agent service is independent
    and can be plugged into the management agent. The component-based approach enables JMX solutions to scale from small
    footprint devices to large telecommunications switches. Can leverage future management concepts: It can implement
    flexible and dynamic management solutions. It can leverage emerging technologies; for example JMX solutions can use
    lookup and discovery services such as Jini network technology, UPnP, and Service Location Protocol (SLP).
    Focuses on management: While JMX technology provides a number of services designed to fit into a distributed
    environment, its APIs are focused on providing functionality for managing networks, systems, applications, and
    services.


JMX Tiered Architecture
JMX technology provides a tiered architecture where managed resources and management applications can be integrated in
the plug-and-play approach as shown in Figure 1. A given resource is instrumented by one or more Java objects known as
Managed Beans (or MBeans), which are registered in a core managed object server known as the MBean server. This server
acts as a management agent and can run on most Java-enabled devices.


